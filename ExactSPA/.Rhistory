library(ExactSPA)
library(ExactSPA)
Adept_test(3,2)
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Adept_test(30,20)
Adept_test(30,200)
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
nll_mjd(c(0,runif(10000,-0.05,0.05)), 1/250, .08, log(.1), log(100), -.001, log(.015), 12, 64)
library(ExactSPA)
ExactSPA::hello()
?nll_mjd
Rcpp::sourceCpp('src/nll_mjd.cpp')
library(ExactSPA)
rm(nll_mjd)
rm(list=ls())
library(ExactSPA)
ExactSPA::hello()
par <- c(r=0.08, lsigma=log(0.1), llambda=log(100), mu=-0.001, lnu=log(0.015), x0=10) #jump intensity usually 100
time <- 4
N <- time*250
dt <- time/N
# Simulate mjd ####
setwd("C:/Users/Berent/Projects/it-ift/implementation/simulation_experiment/mjd")
source("../../simulation/Simulation_MJD_3.R")
X<-mjd_process(N,time,x0=par["x0"],
r=par["r"], sigma=exp(par["lsigma"]), jump_intensity = exp(par["llambda"]),
mu=par["mu"], nu=exp(par["lnu"]),
seed=123)
plot(X)
nll_fun_mjd(par, log(X), dt)
nll_grad_mjd(par, log(X), dt)
opt <- nlminb(par[1:5], nll_fun_mjd, nll_grad_mjd, X=log(mjd.list[[110]]), dt=time/N, control=list(trace=1))
opt <- nlminb(par[1:5], nll_fun_mjd, nll_grad_mjd, X=log(X), dt=time/N, control=list(trace=1))
opt$par
exp(opt$par)
opt
rm(list=ls())
ls()
Rcpp::sourceCpp('C:/Users/Berent/Projects/it-ift/implementation v4/ExactSPA/src/nll_nchisq.cpp')
?nchisq
?chisq
?rchisq
Rcpp::sourceCpp('C:/Users/Berent/Projects/it-ift/implementation v4/ExactSPA/src/nll_nchisq.cpp')
library(ExactSPA)
ExactSPA::hello()
Rcpp::sourceCpp('src/nll_fun.cpp')
Rcpp::sourceCpp('src/nll_fun.cpp')
Rcpp::sourceCpp('src/nll_fun.cpp')
library(ExactSPA)
library(ExactSPA)
library(Quandl)
# Load data
start_date <- "2003-01-01"; end_training <- "2005-01-01";
DJIA<-Quandl("BCB/UDJIAD1",trim_start=start_date, trim_end=end_training)
#DJIA <- Quandl("BCB/UDJIAD1")
DJIA <- DJIA[rev(rownames(DJIA)),]
plot(DJIA,type="l")
Xt=log(DJIA$Value)
# Start params
par <- c(r=0.08, lsigma=log(0.1), llambda=log(100), mu=-0.001, lnu=log(0.015))
dt <- 1/252
# Test
nll_fun_mjd(par, Xt, dt)
nll_grad_mjd(par, Xt, dt)
# Estimate parameters
opt <- nlminb(par, nll_fun_mjd, nll_grad_mjd, X=Xt, dt=dt, control=list(trace=1))
opt
opt$par
exp(opt$par)
library(ExactSPA)
df = 100
ncp = 40
n = 1000
x <- sort(rchisq(n, df, ncp))
hist(x, freq=F)
curve(dchisq(x, df, ncp), add=TRUE)
-sum(dchisq(x, df, ncp, log=TRUE))
nll_nchisq(x, log(df), log(ncp), 20.0, 128)
?nll_nchisq
ExactSPA::nll_nchisq(x, log(df), log(ncp), 20, 128)
nll_nchisq(x, log(df), log(ncp), 20, 128)
library(ExactSPA)
library(ExactSPA)
library(ExactSPA)
df = 100
ncp = 40
n = 1000
x <- sort(rchisq(n, df, ncp))
hist(x, freq=F)
curve(dchisq(x, df, ncp), add=TRUE)
-sum(dchisq(x, df, ncp, log=TRUE))
nll_nchisq(x, log(df), log(ncp), 20.0, 128)
-sum(dchisq(x, df, ncp, log=TRUE))
nll_nchisq(x, log(df), log(ncp), 20.0, 128)
y <- rep(0, length(x))
for(i in 1:length(x)){
y[i] <- exp(-nll_nchisq(as.vector(x[i]),log(df),log(ncp), 12.0, 64)$nll)
}
lines(x,y,col="blue")
-sum(dchisq(x, df, ncp, log=TRUE))
nll_nchisq(x, log(df), log(ncp), 20.0, 128)
par <- c(ldf=log(df), lncp = log(ncp))
opt <- nlminb(par, nll_fun_nchisq, nll_grad_nchisq, X=x)
opt
opt <- nlminb(par, nll_fun_nchisq, nll_grad_nchisq, X=x, control=list(trace=1))
opt
opt
opt$par
exp(opt$par)
library(ExactSPA)
df = 100
ncp = 40
n = 2000
x <- sort(rchisq(n, df, ncp))
hist(x, freq=F)
curve(dchisq(x, df, ncp), add=TRUE)
y <- rep(0, length(x))
for(i in 1:length(x)){
y[i] <- exp(-nll_nchisq(as.vector(x[i]),log(df),log(ncp), 12.0, 64)$nll)
}
lines(x,y,col="blue")
-sum(dchisq(x, df, ncp, log=TRUE))
nll_nchisq(x, log(df), log(ncp), 20.0, 128)
par <- c(ldf=log(df), lncp = log(ncp))
opt <- nlminb(par, nll_fun_nchisq, nll_grad_nchisq, X=x, control=list(trace=1))
opt
opt$par
exp(opt$par)
setwd("~/Dropbox/Apps/TeX Writer/PHD/Working_paper_Tryg_09_2016/implementation")
setwd("C:/Users/Berent/Dropbox/Apps/TeX Writer/PHD/Working_paper_Tryg_09_2016/implementation")
setwd("C:/Users/Berent/Dropbox/Apps/TeX Writer/PHD/Working_paper_Tryg_09_2016/implementation")
# ------------------------------------ R SIMULATE THE DATA -----------------------------------
{
require(tweedie)
set.seed(1)
expected_claims_55 <- 0.2
expected_claimsize_55 <- 100
betta1 <- log(expected_claims_55)/55
betta2 <- log(expected_claimsize_55)/55
customer_ammount <- 100
customer_mat <- matrix(sample(55:70,customer_ammount,replace=T),
nrow=customer_ammount)
data <- rep(0,customer_ammount)
for(i in 1:customer_ammount){
riskfactors <- customer_mat[i,]
claims <- rpois(1,exp(riskfactors %*% betta1))
if(!is.na(claims) && claims>0){
data[i] <- rtweedie(claims,
xi=1.5,
mu=exp(riskfactors %*% betta2),
phi=1
)}
}
par(mfrow=c(1,2))
hist(data)
hist(data[which(data!=0)],
breaks=100)
par(mfrow=c(1,1))
datsim <- list(risk=data,customer_mat=customer_mat)
save(datsim,file="/home/berent/Dropbox/Apps/TeX Writer/PHD/Working_paper_Tryg_09_2016/implementation/generated_data.r")
load("/home/berent/Dropbox/Apps/TeX Writer/PHD/Working_paper_Tryg_09_2016/implementation/generated_data.r")
}
install.packages("tweedie")
require(tweedie)
set.seed(1)
expected_claims_55 <- 0.2
expected_claimsize_55 <- 100
betta1 <- log(expected_claims_55)/55
betta2 <- log(expected_claimsize_55)/55
customer_ammount <- 100
customer_mat <- matrix(sample(55:70,customer_ammount,replace=T),
nrow=customer_ammount)
data <- rep(0,customer_ammount)
for(i in 1:customer_ammount){
riskfactors <- customer_mat[i,]
claims <- rpois(1,exp(riskfactors %*% betta1))
if(!is.na(claims) && claims>0){
data[i] <- rtweedie(claims,
xi=1.5,
mu=exp(riskfactors %*% betta2),
phi=1
)}
}
par(mfrow=c(1,2))
hist(data)
hist(data[which(data!=0)],
breaks=100)
par(mfrow=c(1,1))
data
customer_mat <- matrix(sample(55:70,customer_ammount,replace=T),
nrow=customer_ammount)
customer_mat
data <- rep(0,customer_ammount)
data
?rtweedie
data <- rep(0,customer_ammount)
for(i in 1:customer_ammount){
riskfactors <- customer_mat[i,]
claims <- rpois(1,exp(riskfactors %*% betta1))
if(!is.na(claims) && claims>0){
data[i] <- rtweedie(claims,
xi=1.5,
mu=exp(riskfactors %*% betta2),
phi=1
)}
}
par(mfrow=c(1,2))
hist(data)
hist(data[which(data!=0)],
breaks=100)
par(mfrow=c(1,1))
datsim <- list(risk=data,customer_mat=customer_mat)
lcf_tweedie <- function(s_,riskfactors_,betta2_,a_,p_){
mu_ <- exp(riskfactors_ %*% betta2_)
lcf <- 1/a_*(mu_^(2-p_))/(2-p_)*((1+1i*s_*a_*(1-p_)*mu_^(p_-1))^((2-p_)/(1-p_))-1)
return(lcf)
}
lcf_risk <- function(s, riskfactors, betta1, betta2, a,p){
lcf <- exp(riskfactors %*% betta1) * (exp(lcf_tweedie(s,riskfactors,betta2,a,p)) - 1)
return(lcf)
}
factors <- 55
risk <- 59
expected_jumps <- 0.2
expected_claimsize <- 500
a <- 1
p <- 2.3
cf_risk <- function(t,
riskfactors=risk,
betta1 = c(log(expected_jumps)/factors),
betta2=c(log(expected_claimsize)/factors),
a_=a,
p_ = p){
exp(lcf_risk(t,riskfactors,betta1,betta2,a_,p_))
}
cf_risk(1)
lcf_trisk <- function(s, riskfactors_mat, betta1, betta2, a_, p_){
lcf <- 0
customer_ammount <- nrow(riskfactors_mat)
for(j in 1:customer_ammount){
lcf = lcf + lcf_risk(s,riskfactors_mat[j,],betta1, betta2, a_, p_)
}
return(lcf)
}
cf_trisk <- function(s, riskfactors_mat=customer_mat,
betta1 = c(log(expected_jumps)/factors),
betta2=c(log(expected_claimsize)/factors),
a_=a,
p_=p){
exp(lcf_trisk(s,riskfactors_mat,betta1,betta2,a_,p_))
}
cf_trisk(1)
characteristic_function_to_density <- function(
phi, # characteristic function; should be vectorized
n,   # Number of points, ideally a power of 2
a, b # Evaluate the density on [a,b[
) {
i <- 0:(n-1)            # Indices
dx <- (b-a)/n           # Step size, for the density
x <- a + i * dx         # Grid, for the density
dt <- 2*pi / ( n * dx ) # Step size, frequency space
c <- -n/2 * dt          # Evaluate the characteristic function on [c,d]
d <-  n/2 * dt          # (center the interval on zero)
t <- c + i * dt         # Grid, frequency space
phi_t <- phi(t)
X <- exp( -(0+1i) * i * dt * a ) * phi_t
Y <- fft(X)
density <- dt / (2*pi) * exp( - (0+1i) * c * x ) * Y
data.frame(
i = i,
t = t,
characteristic_function = phi_t,
x = x,
density = Re(density)
)
}
d <- characteristic_function_to_density(
cf_trisk,
2^10,
0,
200000
)
lines(d$x[1:length(d$x)],d$density[1:length(d$x)],type="l")
sum(d$density)*(d$x[2]-d$x[1])
plot(d$x[1:length(d$x)],d$density[1:length(d$x)],type="l")
sum(d$density)*(d$x[2]-d$x[1])
integrand <- function(x, y, rf_, b1_, b2_, a_, p_){
val = Re(cf_risk(x,rf_,b1_,b2_,a_,p_)*exp(-1i*y*x)) / pi
return(val)
}
lcf_gamma <- function(s_,riskfactors_,betta2_,nu_){
lcf <- -1/nu_ * log(1-1i*s_*nu_*exp(riskfactors_ %*% betta2_))
return(lcf)
}
lcf_risk <- function(s, riskfactors, betta1, betta2, nu){
lcf <- exp(riskfactors %*% betta1) * (exp(lcf_gamma(s,riskfactors,betta2,nu)) - 1)
return(lcf)
}
factors <- 55
expected_jumps <- 0.2
expected_claimsize <- 15
nu <- 1
cf_risk <- function(t,
riskfactors=factors,
betta1 = c(log(expected_jumps)/factors),
betta2=c(log(expected_claimsize)/factors),
nu_=nu){
exp(lcf_risk(t,riskfactors,betta1,betta2,nu_))
}
cf_risk(1)
customer_ammount <- 300000
customer_mat <- matrix(sample(55:80,customer_ammount,replace=T),
nrow=customer_ammount)
lcf_trisk <- function(s, riskfactors_mat, betta1, betta2, nu_){
lcf <- 0
customer_ammount <- nrow(riskfactors_mat)
for(j in 1:customer_ammount){
lcf = lcf + lcf_risk(s,riskfactors_mat[j,],betta1, betta2, nu_)
}
return(lcf)
}
cf_trisk <- function(s, riskfactors_mat=customer_mat,
betta1 = c(log(expected_jumps)/factors),
betta2=c(log(expected_claimsize)/factors),
nu_=nu){
exp(lcf_trisk(s,riskfactors_mat,betta1,betta2,nu_))
}
cf_trisk(1)
Erisk <- function(riskfactors,betta1,betta2){
E = exp(riskfactors %*% (betta1+betta2))
return(E)
}
Etrisk <- function(riskfactors_mat,betta1,betta2){
evec <- exp(riskfactors_mat %*% (betta_1+betta_2))
return(sum(evec))
}

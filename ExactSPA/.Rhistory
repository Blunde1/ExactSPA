library(ExactSPA)
library(ExactSPA)
Adept_test(3,2)
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Adept_test(30,20)
Adept_test(30,200)
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/Adept_example[1586].cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
Rcpp::sourceCpp('src/nll_mjd_v1.cpp')
nll_mjd(c(0,runif(10000,-0.05,0.05)), 1/250, .08, log(.1), log(100), -.001, log(.015), 12, 64)
library(ExactSPA)
ExactSPA::hello()
?nll_mjd
Rcpp::sourceCpp('src/nll_mjd.cpp')
library(ExactSPA)
rm(nll_mjd)
rm(list=ls())
library(ExactSPA)
ExactSPA::hello()
par <- c(r=0.08, lsigma=log(0.1), llambda=log(100), mu=-0.001, lnu=log(0.015), x0=10) #jump intensity usually 100
time <- 4
N <- time*250
dt <- time/N
# Simulate mjd ####
setwd("C:/Users/Berent/Projects/it-ift/implementation/simulation_experiment/mjd")
source("../../simulation/Simulation_MJD_3.R")
X<-mjd_process(N,time,x0=par["x0"],
r=par["r"], sigma=exp(par["lsigma"]), jump_intensity = exp(par["llambda"]),
mu=par["mu"], nu=exp(par["lnu"]),
seed=123)
plot(X)
nll_fun_mjd(par, log(X), dt)
nll_grad_mjd(par, log(X), dt)
opt <- nlminb(par[1:5], nll_fun_mjd, nll_grad_mjd, X=log(mjd.list[[110]]), dt=time/N, control=list(trace=1))
opt <- nlminb(par[1:5], nll_fun_mjd, nll_grad_mjd, X=log(X), dt=time/N, control=list(trace=1))
opt$par
exp(opt$par)
opt
rm(list=ls())
ls()
Rcpp::sourceCpp('C:/Users/Berent/Projects/it-ift/implementation v4/ExactSPA/src/nll_nchisq.cpp')
?nchisq
?chisq
?rchisq
Rcpp::sourceCpp('C:/Users/Berent/Projects/it-ift/implementation v4/ExactSPA/src/nll_nchisq.cpp')
library(ExactSPA)
ExactSPA::hello()

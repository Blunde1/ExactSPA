// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// nll_mjd
Rcpp::List nll_mjd(NumericVector X, double dt, double r, double lsigma, double llambda, double mu, double lnu, double length, double n);
RcppExport SEXP _ExactSPA_nll_mjd(SEXP XSEXP, SEXP dtSEXP, SEXP rSEXP, SEXP lsigmaSEXP, SEXP llambdaSEXP, SEXP muSEXP, SEXP lnuSEXP, SEXP lengthSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type dt(dtSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type lsigma(lsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type llambda(llambdaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type lnu(lnuSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_mjd(X, dt, r, lsigma, llambda, mu, lnu, length, n));
    return rcpp_result_gen;
END_RCPP
}
// nll_nchisq
Rcpp::List nll_nchisq(NumericVector X, double ldf, double lncp, double length, double n);
RcppExport SEXP _ExactSPA_nll_nchisq(SEXP XSEXP, SEXP ldfSEXP, SEXP lncpSEXP, SEXP lengthSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type ldf(ldfSEXP);
    Rcpp::traits::input_parameter< double >::type lncp(lncpSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_nchisq(X, ldf, lncp, length, n));
    return rcpp_result_gen;
END_RCPP
}
// nll_nig
Rcpp::List nll_nig(NumericVector X, double lchi, double lpsi, double mu, double gamma, double length, double n);
RcppExport SEXP _ExactSPA_nll_nig(SEXP XSEXP, SEXP lchiSEXP, SEXP lpsiSEXP, SEXP muSEXP, SEXP gammaSEXP, SEXP lengthSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lchi(lchiSEXP);
    Rcpp::traits::input_parameter< double >::type lpsi(lpsiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_nig(X, lchi, lpsi, mu, gamma, length, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ExactSPA_nll_mjd", (DL_FUNC) &_ExactSPA_nll_mjd, 9},
    {"_ExactSPA_nll_nchisq", (DL_FUNC) &_ExactSPA_nll_nchisq, 5},
    {"_ExactSPA_nll_nig", (DL_FUNC) &_ExactSPA_nll_nig, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_ExactSPA(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
